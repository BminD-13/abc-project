@ <stdio.hdr>

@ "parser.hdr"
@ "lexer.hdr"
@ "gen.hdr"
@ "expr.hdr"

fn parseFactor(): -> Expr
{
    if (token.kind == DECIMAL_LITERAL) {
        getToken();
	local expr: -> Expr = createIntegerExpr(token.val);
	return expr;
    } else if (token.kind == LPAREN) {
        getToken();
        local expr: -> Expr = parseExpr();
        if (expr == nullptr) {
            printf("%u.%u: sum expected\n", token.pos.row, token.pos.col);
            return nullptr;
        }
        if (token.kind != RPAREN) {
            printf("%u.%u: ')' expected\n", token.pos.row, token.pos.col);
            return nullptr;
        }
        getToken();
        return expr;
    } else {
        return nullptr;
    }
}

fn parseTerm(): -> Expr
{
    local left: -> Expr = parseFactor();
    if (left == nullptr) {
        return nullptr;
    }
    while (token.kind == ASTERISK) {
        getToken();
        local right: -> Expr = parseFactor();
        if (left == nullptr) {
            printf("%u.%u: factor expected\n", token.pos.row, token.pos.col);
            return nullptr;
        }
        left = createBinaryExpr(token.kind, left, right);
    }
    return left;
}

fn parseExpr(): -> Expr
{
    local left: -> Expr = parseTerm();
    if (left == nullptr) {
        return nullptr;
    }
    while (token.kind == PLUS) {
        getToken();
        local right: -> Expr = parseTerm();
        if (right == nullptr) {
            printf("%u.%u: product expected\n", token.pos.row, token.pos.col);
            return nullptr;
        }
        left = createBinaryExpr(token.kind, left, right);
    }
    return left;
}


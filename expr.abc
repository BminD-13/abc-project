@ <stdio.hdr>
@ <stdlib.hdr>
@ "expr.hdr"
@ "string.hdr"

fn createBinaryExpr(kind: ExprKind, left: ->Expr, right: ->Expr): ->Expr
{
    local n: -> Expr = malloc(sizeof(*n));
    assert(n);
    n->kind = kind;
    n->left = left;
    n->right = right;
    return n;
}

fn createIntegerExpr(val: string): ->Expr
{    
    local n: -> Expr = malloc(sizeof(*n));
    assert(n);
    n->kind = EXPR_INTEGER;
    n->decimal = val;
    return n;
}

fn releaseExpr(expr: ->Expr)
{
    printf("not implemented\n");
}

fn printExprTree(expr: ->Expr)
{
    if (expr->kind == EXPR_INTEGER) {
	printf("[ %llu ]", expr->decimal);
    } else if (expr->kind >= EXPR_ADD && expr->kind <= EXPR_MUL) {
	printf(" [ ");
	switch (expr->kind) {
	    case EXPR_ADD: printf("+"); break;
	    case EXPR_MUL: printf("*"); break;
	    default: assert(0);
	}
	printExprTree(expr->left);
	printExprTree(expr->right);
	printf("] ");
    }
}


@ <stdio.hdr>
@ "lexer.hdr"

// -------

fn getReg(): int
{
    static reg: int = 1;
    return reg++;
}

// -------

fn parseSum(): int;

fn parseFactor(): int
{
    if (token.kind == DECIMAL_LITERAL) {
        local reg: int = getReg();
        printf("\tload %s, %%%d\n", token.val, reg);
        getToken();
        return reg;
    } else if (token.kind == LPAREN) {
        getToken();
        local reg: int = parseSum();
        if (reg < 0) {
            printf("%u.%u: sum expected\n", token.pos.row, token.pos.col);
            return -1;
        }
        if (token.kind != RPAREN) {
            printf("%u.%u: ')' expected\n", token.pos.row, token.pos.col);
            return -1;
        }
        getToken();
        return reg;
    } else {
        return -1;
    }
}

fn parseProd(): int
{
    local left: int = parseFactor();
    if (left < 0) {
        return -1;
    }
    while (token.kind == ASTERISK) {
        getToken();
        local right: int = parseFactor();
        if (right < 0) {
            printf("%u.%u: factor expected\n", token.pos.row, token.pos.col);
            return -1;
        }
        local dest: int = getReg();
        printf("\tmul %%%d, %%%d, %%%d\n", left, right, dest);
        left = dest;
    }
    return left;
}

fn parseSum(): int
{
    local left: int = parseProd();
    if (left < 0) {
        return -1;
    }
    while (token.kind == PLUS) {
        getToken();
        local right: int = parseProd();
        if (right < 0) {
            printf("%u.%u: product expected\n", token.pos.row, token.pos.col);
            return -1;
        }
        local dest: int = getReg();
        printf("\tadd %%%d, %%%d, %%%d\n", left, right, dest);
        left = dest;
    }
    return left;
}

fn main()
{
    getToken();
    local reg: int = parseSum();
    if (parseSum()) {
        printf("\thalt %%%d\n", reg);
    } else {
        printf("syntax error\n");
    }
}